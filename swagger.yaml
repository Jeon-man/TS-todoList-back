
tags:
- name: users
  description: users API
- name: toDos
  description: toDoList API

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] toDos
  /toDos:
    get:
      tags:
      - toDos
      summary: Find All ToDos
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] toDos
    post:
      tags:
      - toDos
      summary: Add Todo
      parameters:
      - toDo: body
        in: body
        description: Todo Data
        required: true
        schema:
          $ref: '#/definitions/toDos'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
          
# [GET] toDos/id 
  /toDos/{id}:
    get:
      tags:
      - toDos
      summary: Find Todo By Id
      parameters:
      - name: id
        in: path
        description: todo Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] toDos/id
    put:
      tags:
      - toDos
      summary: Update Todo By Id
      parameters:
      - name: id
        in: path
        description:  todo Id
        required: true
        type: integer
      - name: body
        in: body
        description: ToDos Data
        required: true
        schema:
          $ref: '#/definitions/toDos'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] toDos/id
    delete:
      tags:
      - toDos
      summary: Delete todo By Id
      parameters:
      - name: id
        in: path
        description: todo Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] toDos/success/id
  /toDos/success/{id}:
    put:
      tags:
      - toDos
      summary: Update todo Success state change to true
      parameters:
      - name: id
        in: path
        description: todo Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] id/authkey
  /{id}/{authKey}:
    get:
      tags:
      - users
      summary: User update auth state to true
      parameters:
        - name: userId
          in: path
          description: user primary key
          required: true
          type: number
        - name: authKey
          in: path
          description: authkey when user created
          required: true
          type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'



# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
      authState:
        type: boolean
        decription: user Email auth state
      authKey:
        type: number
        depcription: user authkey for auth
        
  toDos:
    type: object
    required:
      - toDo
      - userId
    properties:
      toDo:
        type: string
        description: user todo one
      userId:
        type: number
        description: todo own user


schemes:
 - https
 - http
